- name: AWS Tasks
  when: ansible_system_vendor == 'Amazon EC2'
  block:
    - name: Downloading RDS Root GovCloud West certificate
      ansible.builtin.get_url:
        url: https://s3-us-gov-west-1.amazonaws.com/rds-downloads/rds-combined-ca-us-gov-bundle.pem
        dest: /opt/dsm/rds-combined-bundle.pem
        mode: "0644"
      when: aws_region is match(".*gov-west.*")
      become: true

    - name: Downloading RDS Root GovCloud East certificate
      ansible.builtin.get_url:
        url: https://s3-us-gov-east-1.amazonaws.com/rds-downloads/rds-combined-ca-us-gov-bundle.pem
        dest: /opt/dsm/rds-combined-bundle.pem
        mode: "0644"
      when: aws_region is match(".*gov-east.*")
      become: true

    - name: Downloading RDS Root Commercial certificate
      ansible.builtin.get_url:
        url: https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem
        dest: /opt/dsm/rds-combined-bundle.pem
        mode: "0644"
      when: aws_region is not match(".*gov.*")
      become: true

- name: Copy Root CA file
  ansible.builtin.copy:
    content: "{{ rootca_cert }}"
    dest: /etc/pki/ca-trust/source/anchors/cacert.pem
    mode: "0644"
    force: true
  become: true
  notify: Update CA Trust

# Flush handlers to force CA trust update
- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Read RDS certificate
  community.crypto.x509_certificate_info:
    path: /opt/dsm/rds-combined-bundle.pem
  register: rds_cert_info
  become: true
  when: ansible_system_vendor == 'Amazon EC2'

### Import ALB certificate into keystore for Web SSL ###
- name: Create tempfile for private key
  ansible.builtin.tempfile:
    state: file
    suffix: .key
  register: dsm_pkey_tempfile

- name: Create tempfile for cert
  ansible.builtin.tempfile:
    state: file
    suffix: .cer
  register: dsm_cer_tempfile

- name: Copy certificate
  ansible.builtin.copy:
    content: "{{ dsm_cert }}"
    dest: "{{ dsm_cer_tempfile.path }}"
    mode: "0644"
    force: true

- name: Copy private key
  ansible.builtin.copy:
    content: "{{ dsm_cert_key }}"
    dest: "{{ dsm_pkey_tempfile.path }}"
    mode: "0400"
    force: true

- name: Create tempfile for PKCS
  ansible.builtin.tempfile:
    state: file
    suffix: .p12
  register: dsm_p12_tempfile

- name: Generate PKCS#12 file
  community.crypto.openssl_pkcs12:
    action: export
    path: "{{ dsm_p12_tempfile.path }}"
    friendly_name: tomcat
    privatekey_path: "{{ dsm_pkey_tempfile.path }}"
    certificate_path: "{{ dsm_cer_tempfile.path }}"
    passphrase: changeit
    force: true
    state: present
    mode: "0400"
  become: true

- name: Ensure tmp PKCS12 does not exist
  ansible.builtin.file:
    path: /tmp/.keystore
    state: absent
  become: true

- name: Generate PKCS12
  ansible.builtin.command: >
    /opt/dsm/jre/bin/keytool -importkeystore -destkeystore /tmp/.keystore -srckeystore {{ dsm_p12_tempfile.path }}
     -srcstoretype pkcs12 -alias tomcat -srcstorepass changeit -deststorepass changeit -deststoretype pkcs12
  become: true
  register: generate_jks
  changed_when: generate_jks.stderr_lines | select("match", ".*Importing keystore.*") # Appears to normally output to stderr

- name: Add RootCA to PKCS12
  ansible.builtin.command: >
    /opt/dsm/jre/bin/keytool -import -alias root -keystore /tmp/.keystore -file /etc/pki/ca-trust/source/anchors/cacert.pem
     -srcstorepass changeit -deststorepass changeit -storetype pkcs12 -trustcacerts -noprompt
  become: true
  register: add_rootca_jks
  changed_when: add_rootca_jks.stderr_lines | select("match", ".*Certificate was added to keystore.*")

- name: Copy PKCS12 to dsm directory
  ansible.builtin.copy:
    src: /tmp/.keystore
    dest: /opt/dsm/.keystore
    mode: "0644"
    force: true
    remote_src: true
  become: true

- name: Update keystore password
  ansible.builtin.lineinfile:
    path: /opt/dsm/configuration.properties
    line: keystorePass=changeit
    regexp: "^keystorePass="
    state: present
  become: true

- name: Import RootCA to JRE keystore
  ansible.builtin.command:
    cmd: >
      /opt/dsm/jre/bin/keytool -import -alias root -trustcacerts -file /etc/pki/ca-trust/source/anchors/cacert.pem -keystore /opt/dsm/jre/lib/security/cacerts
       -storepass changeit -noprompt
  become: true
  register: import_jre_rootca
  changed_when: import_jre_rootca.stderr_lines | select("match", ".*Certificate was added to keystore.*")
  ignore_errors: true # Adding ignore as the alias can already exist

- name: Import dsm cert to JRE keystore
  ansible.builtin.command:
    cmd: >
      /opt/dsm/jre/bin/keytool -import -alias tomcat -trustcacerts -file {{ dsm_cer_tempfile.path }} -keystore /opt/dsm/jre/lib/security/cacerts
       -storepass changeit -noprompt
  become: true
  register: import_jre_cert
  changed_when: import_jre_cert.stderr_lines | select("match", ".*Certificate was added to keystore.*")
  ignore_errors: true # Adding ignore as the alias can already exist

- name: Restart DSM
  ansible.builtin.service:
    name: dsm_s
    state: restarted
  become: true

- name: Pause
  ansible.builtin.pause:
    seconds: 60

- name: Stop DSM
  ansible.builtin.service:
    name: dsm_s
    state: stopped
  become: true

### Enable FIPS mode ###
- name: Enable FIPS mode
  ansible.builtin.command: /opt/dsm/dsm_c -action enablefipsmode
  register: enable_fips
  become: true
  changed_when: enable_fips.stdout_lines | select("match", ".*FIPS mode enabled.*")

- name: Debug enable_fips
  ansible.builtin.debug:
    var: enable_fips

- name: Reload systemctl
  ansible.builtin.systemd:
    daemon_reload: true
  become: true

- name: Start DSM
  ansible.builtin.service:
    name: dsm_s
    state: started
  become: true

### Import RDS root certificate into BCFKS file for PostgreSQL SSL connection ###
- name: Ensure BCFKS does not exist
  ansible.builtin.file:
    path: /opt/dsm/cacerts.bcfks
    state: absent
  become: true

- name: Copy default Java cacerts
  ansible.builtin.copy:
    src: /opt/dsm/jre/lib/security/cacerts
    dest: /opt/dsm/cacerts
    force: true
    remote_src: true
    mode: preserve
  become: true

- name: Import keystore
  ansible.builtin.command:
    cmd: >
      /opt/dsm/jre/bin/keytool -importkeystore -srckeystore "/opt/dsm/cacerts" -srcstoretype JKS -deststoretype BCFKS
       -destkeystore "/opt/dsm/cacerts.bcfks" -srcstorepass changeit -deststorepass changeit -providerpath "/opt/dsm/jre/lib/ext/ccj-3.0.0.jar"
       -providerclass com.safelogic.cryptocomply.jcajce.provider.CryptoComplyFipsProvider
  become: true
  register: import_keystore
  changed_when: import_keystore.stderr_lines | select("match", ".*Import command completed:.*")

- name: Import RDS certificate to BCFKS
  ansible.builtin.command:
    cmd: >
      /opt/dsm/jre/bin/keytool -import -alias "{{ rds_cert_info.subject['commonName'] }}" -file "/opt/dsm/rds-combined-bundle.pem" -keystore "/opt/dsm/cacerts.bcfks" -storepass changeit
       -provider com.safelogic.cryptocomply.jcajce.provider.CryptoComplyFipsProvider -trustcacerts -providerpath "/opt/dsm/jre/lib/ext/ccj-3.0.0.jar" -storetype BCFKS -noprompt
  become: true
  register: import_rds_cert
  changed_when: import_rds_cert.stderr_lines | select("match", ".*Certificate was added to keystore.*")
  when: ansible_system_vendor == 'Amazon EC2'

# Note: It's not in the original Trend Micro install instructions, but if the "&sslrootcert=/opt/dsm/rds-combined-bundle.pem" line is not present,
# dsm_c will consistently fail with errors stating that "/root/.postgresql/root.crt could not be found"
- name: Set DSM DB connection to use SSL
  ansible.builtin.lineinfile:
    path: /opt/dsm/webclient/webapps/ROOT/WEB-INF/dsm.properties
    line: database.PostgreSQL.connectionParameters=ssl=true&sslrootcert=/opt/dsm/rds-combined-bundle.pem
    state: present
  become: true
  when: ansible_system_vendor == 'Amazon EC2'

# This code attempts to set heap_size to half of total RAM
- name: Set heap_size
  ansible.builtin.set_fact:
    heap_size: "{{ ((ansible_memtotal_mb / 1024.0) | round(0, 'ceil') | int) // 2 }}"

- name: Add 1 to heap_size if not even number
  ansible.builtin.set_fact:
    heap_size: "{{ heap_size | int + 1 }}"
  when: heap_size | int is not divisibleby 2

- name: Limit heap size to 32GB
  ansible.builtin.set_fact:
    heap_size: 32
  when: heap_size | int > 32

- name: Debug heap_size
  ansible.builtin.debug:
    var: heap_size

- name: Copy dsm_s vmoptions from template
  ansible.builtin.template:
    src: dsm_s.vmoptions.j2
    dest: /opt/dsm/dsm_s.vmoptions
    force: true
    mode: "0644"
  become: true

- name: Restart DSM
  ansible.builtin.service:
    name: dsm_s
    state: restarted
  become: true

- name: Create CNAME record for ALB
  community.windows.win_dns_record:
    name: "dsm"
    type: "CNAME"
    value: "{{ alb_hostname }}"
    zone: "{{ ansible_domain }}"
  delegate_to: dc1

- name: Remove dsm pkey Tempfile
  ansible.builtin.file:
    path: "{{ dsm_pkey_tempfile.path }}"
    state: absent

- name: Remove dsm cer Tempfile
  ansible.builtin.file:
    path: "{{ dsm_cer_tempfile.path }}"
    state: absent

- name: Remove dsm p12 Tempfile
  ansible.builtin.file:
    path: "{{ dsm_p12_tempfile.path }}"
    state: absent
